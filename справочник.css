margin - отступы между блоками margin: 1.5em 0; 1.5 отступ сверху и снизу 0 отступ слева и справа, отступы снаружи (создает пустоту вокруг блока) (задаеться блоку которому нужен отступ)
padding - отступ от границ (задаеться родителю)

z-index - кто кого перекроет (не работает с position: absolute)

min-height - минимальная высота элемента 
font-size: 1em -- высота шрифта равна высоте буквы "M" данного шрифта
rgba(255, 128, 128, 0/1) -- цвет, полностью прозрачный/непрозрачно (от 0 до 1 множество значений)


vertical-align: top/middle/bottom местоположение текста по вертикали, работает ток если line-height равен высоте блока

input[type="text"],
input[type="password"],
select{
    Выделен не весь Input сразу
}

margin-left: 50px; -- ячейка смещается вправо на 50px
padding: 20px;  -- контент ячейки смещаеться от ее границ на 20px (увнличивает ячейку)
width: 50%; -- ячейка занимает 50% ширины (находиться слева)
position: absolute; -- ячейка поверх других ячеек
left: 100px; -- отступ слева 
bottom: 200px; -- отступ сверху
float: left; -- прижимается к леву, все остальные обтекают справа (center - нельзя)
clear: both; -- элемент перестает обтекать другие элементы

/*<p class="blue green" -- сразу два класса (при конфликте выбираеться тот кто последний в css) */
cursor: pointer; -- курсор мыши становиться другим (ладошкой)
inherit(background: inherit;) -- использует такое-же значение как у родителя

position: absolute; -- элемент распологаеться поверх других, отсчет координат от начала родителя
position: relative; -- положение относительно его исходного места
top/left/right/bottom: 5px; -- позиционирование элемента
transform: rotate(180deg); -- перевернуть элемент

font-family: "редкий шрифт", "serif";


margin-left: -20px; -- сдвиг одного элемента на другой



input:enabled/disabled {
    стили для включенных или выключенных input
}
opacity: 0.5; -- прозрачность
color: rgba(0, 120, 201, 0.5); -- прозрачность, первые три цифры - цвет, 0.5 - прозрачн
input:read-only {
    для input которые можно ток читать
}
input:read-write {
    всем полям доступным для редактирования
}
input:required {
    стили для обязательных полей
}

input:optional {
    все не обязательные поля
}
    input:not([type*="submit"]):optional {
        необязательным полям, кроме кнопки
    }
input:checked {
    полям radio и checkbox у которых являються выбранными
}
input:invalid/valid {
    для не правильно/правильно заполненных значений
}
input:in-range/out-of-range {
    из типа NUMBER применяються стили допустимым/не допустимым значениям
}
input:checked ~ .item {
    всем элементам с классом .item которые после отмеченного поля
}

display: block; -- преобразует элемент в блочный
display: inline; -- преобразует элемент в строчный
display: inline-block; -- можно расположить в одну строку



visibility: hidden; -- элемент не показываеться, но занимает место

padding: 10px; -- отступ 10px со всех сторон ( увеличивает ширину содержания )
padding: 5px 10px; сверху и снизу 5px, справа и слева 10px
padding: 5px 10px 15px; сверху 5px, слева и справа 10px, снизу 15px
padding: 5px 10px 15px 20px; отступы в порядке: сверху, правый, нижний, левый
padding-right/left/top/bottom

/* margin: вертикальный отступ между двумя элементами равен большему margin, горизонтальный отступ равен сумме margin обоих элементов */ 

/* разместить блок по центру */
    width: 96px; -- указать любой размер
    margin-left: auto;
    margin-rigth: auto;
/* */

width: -- только ширина содержания, (не блока!)
width: auto; -- ширина БЛОКА такая же как у родителя
width: 100%; -- ширина СОДЕРЖАНИЯ блока равна ширине БЛОКА родителя (если есть внетренние отступы или рамка, то блок становиться больше родителя)

box-sizing: border-box; -- теперь width задает ширину всего блока
box-sizing: content-box; -- теперь width задает ширину контента

Симпатичное поле ввода {
    input[type="text"] {
    box-sizing: border-box;
    width: 100%;
    padding: 5px 10px;
    color: #666666;
    border: 2px solid #cccccc;
    border-radius: 5px;
}
}
box-sizing: content-box; -- ширина контента
box-sizing: border-box; --  ширина блока
display: block/inline; -- делает элемент блочным/строчным
display: inline-block; -- можно задавать размеры отступы рамки, ширина зависит от содержания, могут находиться в одной строке, выравниваються вертикально

/* используем min-height у родителя, чтобы при использовании float дочерними элементами, родитель не схлопнулся */
/* если у двух элементов float: right; и они помешаються на одной строке, то правее находиться тот элемент который прописан выше в html */

clear: left/right/both/none; -- запрещает элементу обтекать элемент с float (переходит на следующую строку)

чтобы родитель не схлопнулся добавляем, в html, к родителю class="clearfix"
    .clearfix::after {
        content: "";
        display: table;
        clear: both;
    }

пример блочной верстки (сетки) {
    body {
    min-width: 500px;
    margin: 0;
    padding: 0;
    font-family: "PT Sans", sans-serif;
    }
    
    .layout-positioner {
        width: 430px;
        margin: auto; /* размещает по центру */
    }
    
    .layout-positioner::after {  /* распорка чтоб не схлопнулся */
        display: table;
        content: "";
        clear: both;
    }
    
    .header {
        margin-bottom: 10px;
        color: white;
        background: #34495;
    }
    
    .header .layout-column {
    min-height: 50px;
    background: rgba(192, 57, 43, 0.9);
    }

    .header .layout-column-image {
        float: left;
        width: 280px;
    }

    .header .layout-column-menu {
        float: right;
        width: 130px;
    }

    .features {
        margin-bottom: 10px;
    }

    .features .layout-column {
        float: left;
        width: 130px;
        min-height: 100px;
        margin-right: 20px;
        background: rgba(236, 240, 241, 0.9);
    }

    .features .layout-column:last-child { /* чтобы последний блок не имел отступа от правой границы */
        margin-right: 0;
    }

    .footer {
        min-height: 50px;
        color: white;
        background: #34495e;
    }
}

margin: 0 auto; -- центрует блок (должен быть display: block)

vertical-align: middle/top/bottom; -- вертикальный выравнивание по центру/верху/низу (прописываем у блока который нужно выравнить)
text-align: left/center/right; -- выравнивание по горизонтали

/* пробелы в коде у инлайновых блоков учитываються, чтоб избавиться от этого у контейнера размер шрифта делаем нулевым*/
font-size: 0px;

/* у body указываем самый распостраненный шрифт на сайте */
/* если header состоит из картинки и белых букв поверх, то backgroud-color задаем темный */

list-style: none; -- убирает у списка "маркеры" (черные точки)

/* используй line-height чтоб(текст не прилипал к границам, увеличить ячейку) вместо padding */

font: inherit; -- задает параметры шрифта как у родителя (input по умолчанию не наследует)


jpeg -- для фотографий, картин. Не подходит для схем и текста (можно задать уровень качества(при низком качестве появл артефакты)), не поддерживает прозрачность
png-8 -- для текста и изображений где мало цветов(максимум 256цветов), поддерживает прозрачность 
png-24 -- для текста графиков и сложных изображений, весит больше чем jpeg, поддерживает полупрозрачность, /* всегда использовать */




outline: 0; убирает у input обводку

display: inline-block; -- ширина зависит от содержания, распологаються в одну строку
position: statick; -- позиция блока относительно других элементов (statick - по умолчанию)

position: relative; -- относительное позиционирование, по умолчанию не изменяет местоположение {
    top/bottom/left/right: 5px; -- отступ от изначального места, может заезжать на другие блоки
    /* элемент не смещаеться и продолжает занимать место в потоке, смещаеться лишь его иллюзорная копия */
    /* можно использовать для создания теней -- элемент вкладываем в контейнер с background под*/
}

position: absolute; -- элемент поверх других элементов, не занимает место в потоке, ширина по содержанию, можно задать width и height даже строчным {
    top/bottom/left/right: 5xp; -- отступ от окна браузера
    /* если один из родителей имеет position: relative то отступ от границ родителя*/ !important
    /* используеться чтоб аккуратно разместить элементы */
}

position: fixed; -- поверх других элементов, не занимает место, не прокручиваеться, отсчет только от окна браузера {
    top/bottom/left/right: 5xp; -- отступ (только!) от окна браузера
}

/* по умолчанию у body есть margin от границы экрана */
/* у display: inline-block; по умолчанию есть отступ снизу и между inline блоками */
margin: 50px auto; -- отступ сверху 50px, по горизонтали в центре

overflow: visible/hidden/scroll/auto/inherit -- отображение не помещающегося контента: отображаеться за пределами/не отображаеться/всегда добавляет полосы прокрутки/полосы ток при необходимости/наследует у родителя

#a {
    для id="a"
}

user-select: none; -- запрещает выделение

/* АНИМАЦИИ */

/* transform не работает с inline элементами */

transform: translateX(200px) translateY(100px); -- перемещение по Х на 200 и по У на 100
transform: translate(200px, 100px); -- то же самое что и выше

transform: scale(2); -- увеличивает в два раза 
    scale(1) -- значение по умолчанию
    scale(2 0.5) -- увеличивает в 2 раза по x и уменьшает в два раза по y
    scaleX(-1) -- зеркалит по горизонтали

transform: rotate(90deg); -- разворот на 90 градусов (система координат тоже поворачиваеться)

transform: skewX(30dex); -- наклон на 30 градусов по x

transform-origin: top right; -- начало координат в верхнем правом углу (при исп. rotate картинка крутиться относительно нового начала координат)

opacity: 0; -- прозрачность, полностью прозрачная

/* отцентровать блок 
    position: relative;
    left: 50%;
    top: 50%;
    transform: translateX(-50%) translateY(-50%); */

/* блоку задаем transform: skew(15deg);
   а тексту внутри transform: skew(-15deg)
    в итоге родитель наклонен, а текст внутри нет*/

transition: transform 0.5s ease; -- transform изменяеться плавно

transition-duration: 1s; -- длительность перехода (для всех меняющихся свойств)

transition-property: width, height; -- менять плавно ток ширину и высоту
transition-duration: 1s, 5s; -- width - за 1сек, height - за 5сек

transition-delay: 150ms; -- задержка анимации на 150 мили секунды

transition-timing-function: ease(по умолч)/linear; -- начинаеться медленно затем ускоряеться и опять замедляеться / изменяеться линейно
transition-timing-function: cubic-bezier(0, 0, 1, 1); -- (x1, y1, x2, y2) /* в данном примере тоже что linear */
transition-timing-function: steps(5, start/end); -- 5-число шагов

pointer-evens: none; -- выключает hover

/* Пример анимации: */

@keyframes stretching { /* описание ключевых кадров */
    0% { /* вместо 0 можно исп from */
        width: 100px;
    }
    100% { /* вместо 100% можно исп to */
        width: 200px;
    }
}

.button {
    animation-name: stretching;
    animation-duration: 1s;
}
/* */

50%, 80% {
    transform: translateX(10px); -- с 50 до 80 будет стоять в данном положении
}

.element { /* несколько анимаций у одного элемента*/
    animation-name: first-animation, second-animation;
    animation-duration: 5s, 10s;
}

animation-iteration-count: 2/infinite; -- количество повторений анимаций 2 раза/бесконечно

animation-direction: reverse; -- анимация в обратную сторону
animation-direction: alternate/alternate-reverse; если анимация производиться несколько раз то (нечетные прямо четные в обратную)/(нечетные в обратную четные прямо) 

animation-delay: 1s; -- задержка анимации

animation-fill-mode: forwards; -- после выполнения анимации элемент НЕ вернеться в начало
animation-fill-mode: backwards; -- стили которые на 0% применяються до начала анимации
animation-fill-mode: both; -- и forwards и backwords

animation-play-state: running/paused; -- ставит анимацию на паузу по уиолч/пауза

animation-timing-function: ease/linear; -- график изменения анимации 
animation-timing-function: steps(5, end/start); -- 5-число шагов за которые проходит анимация

/* КНОПКИ */
блоку с кнопкой задаем display: inline-block; и vertical-align: top;

/* Cписок */
чтоб список расположить по горизонтали, элементами списка задаем display: inline; (строчные элементы выстраиваються в одну строку)

между inline-block есть пробелы, чтоб от них избавиться задаем отрицательный margin (margin-right: -4px)

/* если задать тексту line-height равный высоте блока, то текст отцентруеться по вертикали */

/* почему то inline-blok не зависит от width и height (задан background-image background-repeat: no-repeat) ? */ 

/* по умолчанию у h2 и p есть внешние отступы, нужно обнулять margin: 0; */

/* когда строим колонки на флоатах, задаем max-width чтоб не было переполнения */

/* если вверху есть float'ы то нижним флоатам задаем clear, чтоб блок начинался с новой строки  */

// ДЕКОРАТИВНЫЕ ЭФФЕКТЫ CSS3

/* через css мы можем выводить текст из data атрибутов */
< data-text="hello">world</p>

p::before {
    content: attr(data-text);
}

/* hover с after */

a:hover::after {
    свойства применяються к a::after, при наведении на a
}

/* */

/* Если блоку поставить отрицательный маргин margin: -10px; то он выпадет из родителя  */

clip: rect(верхняя-координата, правая-координата, нижняя-координата, левая-координата); -- определяет какая часть элемента будет видимой, задаем координаты видимой части
/* работает ток с position: absolute; */
clip: rect(10px, 50px, auto, auto); -- сверху отрезаеться 10px, справа координата 50, снизу и слева без изменений


/* можно сделать слайдер фотографий с помощью css */
Будем изменять фотографии с помощью input:checked
сам input спрячем, а нажимать будем на label 
    #btn-1:checked ~ .slider-controls label[for="btn-1"]{
        свойства применяються когда форма с id="btn-1" выбрана (checked) для label который в блоке .slider-controls
    }


/* Переменная счетчик */

counter-reset: flag;  -- в родителе создаем переменную счетчик, flag - имя переменной

a::before {
    content: counter(flag); // выводим flag
    counter-increment: flag; // каждому flag делаем +1 (если несколько a, то у каждого свой номер по порядку)
}


/* маркер в виде капли (на карте) */

.pin {
    border: 10px solid #f75850;
    width: 15px;
    height: 15px;
    border-radius: 50% 50% 50% 0;
    transform: rotate(-45deg);
}

/* */


/* разместить по центру (вертикаль коризонталь) position: absolute элемент */

.absolute {  // находиться ровно посередине родительского блока
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: auto;
    
    width: 10px; // нужно указывать размеры
    height: 10px; // иначе займет весь родитель
}
/* */

resize: none/both/horizontal/vertical; -- разрешать увеличивать <textarea> не разрешать/разрешить(по умолч)/ток по горизонтали/ток по вертикали


/* отцентровать блок по вертикали */

родителю - display: flex;
дочернему - margin: auto;


/* если margin-top задавать в процентах то процент берется из ширины родителя */

/* если height задать в процентах, то процент берется из высоты родителя (а не из ширины как у margin) */


pointer-events: none; -- запрешаем нажимать на элемент (с ::before -http://jsfiddle.net/ZWw3Z/117/?utm_source=website&utm_medium=embed&utm_campaign=ZWw3Z)


input:valid {
    // свойства ток когда в <input type="text" required> есть хоть один символ
}


inline-block выравниваеться по содержимому своего контейнера 