.header .image {
    css свойства выполняються ток если image внутри header (изменяеться image)
}

.header .table .image {
    применяеться к image если image в table, а table в header
}

.select1 + .select2 { 
    стили применяються к .select2 только если перед ним находиться элемент с select1
}

.select1.select2 {
    class="select1 select2" стили применяються только если имеються два селектора
}

.big .select1 + .select2 {
    для select2 применяються свойства только если перед ним select1 и они оба внутри big 
}

.cards, .six {
    стиль даеться обоим атрибутам
}

.places > li {
    стили применяються к li только когда он являеться дочерним к .places (расположены рядом) 
}

li:last-child {
    стили применяються послнднему дочернему элементу родителя li
}


li:nth-child(2) { /* все четные элементы 2n*/
    выбирает второй элемент списка
}

li:first-of-type {
    первый элемент родителя с таким-же типом ка li
}
tr:hover {
    стиль применяеться только когда на tr наводишь мышкой
}

tr:hover em{
    стиль применяеться к em когда на tr наводишь мышкой
}

a:link {
    стили для еще не активированных ссылок
}
a:visited {
    стили для посещенных ссылок
}
a:active {
    стиль вовремя нажатия на ссылку
}

p::selection {
    для выделеного текста (выделение при копирование текста)
}

input:focus {
    стили примняються только когда в фокусе
}

input:valid {
    стили ток для правильно заполненных форм
}

input[type="text"] {
    стили применяються только к тем у форм с типом text
}
#name{
    стили применяються элементу с id="name"
}
blue {
    color: blue !important;  -- высший приоритет
}
/* 
    p a - селекторы типов элементов и псевдо элементов
    .class a:hover - класс, псевдо класс, селектор атрибутов
    #name - идентификатор
*/
li:not(:last-child):not(:first-child) { /* li:not(.class) {} */
    стили применяються для всех li кроме первого и последнего
}
li:first-child:not(.spade) {
    стиль применяеться к первому li, кроме li с классом .spade
}
li:not(:first-child):not(.queen):not(.jack).heart {
    стили применяються к .heart не являющимся первыми и .queen .jack
}
:nth-last-child  -- отсчет с последнего ребенка
:nth-last-of-type(2)

li:nth-of-type(2) {
    выбирает второй дочерний li своего родителя
}
li:nth-child(2){
    выбирает второй дочерний элемент родителя li(li-ребенок) не смотря на класс 
}
li:nth-of-type(2n+1) {
    Нечетным элементам
}

li:nth-of-type(odd){
    все нечетные номера элементов
}

.selector1 ~ .selector2 {
    стили применяються всем тегам между selec1 и select2 (включая select2)
}
ul:empty {
    стили применяються всем ul у которых нет детей
}

li:only-child {
    стиль применяеться к li который только один
}
li:only-of-type {
    единственный сын с таким типом
}


.class::before {  
    content: "A";  -- добавляет псевдоэлемент(типа span) A в html
}
.class::after {
    добавляет псевдоэлемент в конец элемента, (body::after блок будет ниже footer)
}
/* у after z-index выше  */


p::first-line {
    стиль задаеться первой строке текста
}
p::first-letter {
    стиль задаеться первой букве
}

/* ПОЛЕЗНО */
[class^="column-"] {
    стили задаються для всех правил у которых есть слово column-
    .column-1 .column-2  для обоих задаються одинаковые свойства и один раз
}


input[name^="cat"] {  
    стили применяються всем input у которых name начинаеться cat
}
a[href$=".pdf"]{
    всем a у которых href оканчиваеться строкой .pdf
}
[class*="person"]{
    стль применяеться всем элементам у которых class="person" или содержит эту подстроку
}
[foo~="bar"] {
    выбирает все элементы у которых в значение атрибута foo есть СЛОВО bar
}
[foo|="bar"] {
    те у кого начинаеться со слова bar либоте кто состоят из слова bar
}
.cat[title*="Кекс"]::before {
    для .cat::before если у title есть Кекс
}

:checked{
    для выделенных полей input 
}

td:not(:first-child) -- стили для всех td кроме первого 