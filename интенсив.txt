у каждой программы есть свой порт
на серевере есть программа (apache) которая использует определенный порт (обычно 80), эта программа раздает сайт пользователям

виртуальный хост - на одном порту несколько 
server {
    listen 80; // порт
    server_name htmlacademy.ru;  // по этому имени
    root /Users/simonenko/sites/htmlacademy/public; // открывает эту папку
}
server {
    listen 80;
    server_name assets.htmlacademy.ru;  //  а по этому имени
    root /Users/simonenko/sites/assets/public;  // открывает эту папку
} // это в конфигурационном файле - nginx.conf

// крч, Ip-адресс указывает на комп, порт указывает на программу, хост указывает на на папку со страницей сайта



когда вводим google.com - комп ишет в таблице DNS ip-адрес гугла, и используя его подключаеться к серверу

таблица dns медленно обновляеться поэтому новый сайт не сразу находиться



доставляеться контент по протоколу tcp/ip, и доставляет в HTTP пакетах

в http находиться инфа о браузере и откуда мы перешли на этот сайт, и список запрашиваемого контента

https - передает тоже http пакеты, но зашифрованные и через порт 443




комит - внесение не сохраненных изменений в хранилище, каждое изменение можно комитеть
пулл - забрать изменения из удаленного репозитория
пуш - отправить изменения в удаленный репозиторий

git commit - сохранение изменений (локально)

commit message - коментарий о версии

git push - передает всю историю изменений (все версии)
git pull - скачать все версии из удаленного репозитория

/* если ты скачал версию изменил её, а в это время вышла новая, то нужно с самого начала скачать новую далее гит соединит изменения (или сделает две ветки) и после этого можно выкладывать */

пулреквест - предложение об изменении главного репозитория

branch - создать ветку



/* Лекция 2 */

<link rel="stylesheet"> -- лучше подключать вначале чтоб css быстрее загрузился
в <ul> можно ток <li> остальные теги вставлять нельзя

flow - все элементы (кроме metadata)
    внутри flow подразделяються на:
        phrasing -  <em> <i> <span> (тип строчные, а остальные блочные)
            embedded - <img> <video> (встраевыемый контент)
        heading -  <h1> ... <h6>
        sectioning - <section> <nav>
        interactive - <a> <input> <button> <video>... то с чем может взаимодействовать пользователь (<video> - интерактивное ток если им может управлять пользователь)
        все остальные - <div> <p> <ul> <header> <ol>
        
все теги отрисовываються в боксах (если border поставить то видно рамку), и вот эти боксы и бывают строчными или блочными (регулирует css)


<article> -- независимая часть (твит, коммент) можно встраивать в другой сайт
<section> -- смысловой раздел документа, нельзя вырвать из сайта (наши преимущества)
<nav> -- огловление главная навигация сайта (шапка сайта)

<h1> -- часто дизайнеры не ставят (нет смысла переписывать название сайта если он есть на логотипе), но надо самому делать h1 (для поисковика) и прятать его от пользователя

заголовок не контент, он его резюмирует (мы маленькая но гордая студия - не заголовок (<b>))

<main> -- уникальный контент на страницы

в списке все элементы однородные по функции

разметка качественная для поисковика нужна

<p> групирует фразовые элементы, input и label - фразовые то есть их можно вставить в <p>

<input> и <label> лучше группировать в <li>

иконку лучше вставлять через псевдоэлемент

<input type="submit"> тот же <button> ток устаревший

<b> можно оборачивать первый абзац, если его нужно выделить

лучше давать класс wrapper маину -  main="wrapper" 

интерактивные элементы (попапы всплывающие) нужно делать в конце разметки

line-height по умолчанию 120% от размера шрифта

<div tabindex="0"> -- div можно переключать tab'ом 
    tabindex="-1" -- делает элемент интерактивным, но на него нельзя попасть tab'ом,ток если сфокусировать на нем (крестик на попапе. когда попап скрыт, на крестик нельзя перейти tab'ом, но если он станет видимым то мы фокусируем пользователя на крестики )
    
лучше visual: hidden;

<button disabled> отключение кнопки